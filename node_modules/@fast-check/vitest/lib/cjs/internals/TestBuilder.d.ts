import type { Parameters as FcParameters } from 'fast-check';
import type { ArbitraryTuple, Prop, ArbitraryRecord, PropRecord, FcExtra } from './types.js';
/**
 * prop has just been declared for typing reasons, ideally TestProp should be enough
 * and should be used to replace `{ prop: typeof prop }` by `{ prop: TestProp<???> }`
 */
declare const prop: <Ts, TsParameters extends Ts = Ts>(arbitraries: Ts extends [any] | any[] ? ArbitraryTuple<Ts> : ArbitraryRecord<Ts>, params?: FcParameters<TsParameters>) => (testName: string, prop: Ts extends [any] | any[] ? Prop<Ts> : PropRecord<Ts>, timeout?: number | undefined) => void;
/**
 * Revamped {it,test} with added `.prop`
 */
export type FastCheckItBuilder<T> = T & ('each' extends keyof T ? T & {
    prop: typeof prop;
} : T) & {
    [K in keyof Omit<T, 'each'>]: FastCheckItBuilder<T[K]>;
};
/**
 * Build the enriched version of {it,test}, the one with added `.prop`
 */
declare function enrichWithTestProp<T extends (...args: any[]) => any>(testFn: T, fc: FcExtra, ancestors?: Set<string>): FastCheckItBuilder<T>;
export declare const buildTest: typeof enrichWithTestProp;
export {};
